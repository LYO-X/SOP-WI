name: Build Read Log

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"  # every 30 minutes

permissions:
  contents: write
  issues: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Read-and-Understood.md
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.READLOG_TOKEN }}  # PAT with Issues: Read for LYO-X/read-logs
          script: |
            const fs = require('fs');
            const owner = 'LYO-X';
            const repo  = 'read-logs';

            // 1) Fetch ALL issues; we'll filter in code (more robust)
            const issues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: 'all', per_page: 100 }
            );

            // 2) Define what counts as a "receipt"
            const isReceipt = (it) => {
              const byLabel = (it.labels || []).some(l => (l.name || '').toLowerCase() === 'read');
              const byTitle = /^read:/i.test(it.title || '');
              return byLabel || byTitle;
            };

            const receipts = issues.filter(isReceipt);

            core.info(`Fetched ${issues.length} issues; ${receipts.length} qualify as receipts.`);

            // 3) Helpers to parse Issue Form bodies
            function parseFields(body) {
              const text = body || '';
              const lines = text.split('\n').map(s => s.trim());

              const afterHeading = (heading) => {
                const idx = lines.findIndex(l => l.toLowerCase() === `### ${heading.toLowerCase()}`);
                return (idx !== -1 && lines[idx + 1]) ? lines[idx + 1].trim() : '';
              };

              const fromHeadings = {
                url: afterHeading('Document URL'),
                ver: afterHeading('Version / commit (optional)'),
              };

              // Fallback: first URL anywhere in the body
              const urlInBody = (text.match(/https?:\/\/\S+/)?.[0] || '').trim();

              return {
                url: fromHeadings.url || urlInBody,
                ver: fromHeadings.ver || ''
              };
            }

            // 4) Build entries and aggregates
            const entries = [];
            const perDoc = new Map();   // url -> {count, users:Set, last}
            const perUser = new Map();  // user -> {count, docs:Set}

            for (const i of receipts) {
              const { url: urlFromBody, ver } = parseFields(i.body);
              const who  = i.user?.login ? `@${i.user.login}` : 'unknown';
              const date = (i.created_at || '').slice(0,10);
              // Fallback to URL in title after "Read:"
              const titleUrl = (i.title || '').replace(/^Read:\s*/i,'').trim();
              const url = urlFromBody || titleUrl || '(no URL)';

              entries.push({ date, who, url, ver, number: i.number });

              // per-document
              const d = perDoc.get(url) || { count: 0, users: new Set(), last: '' };
              d.count += 1;
              d.users.add(who);
              if (!d.last || date > d.last) d.last = date;
              perDoc.set(url, d);

              // per-user
              const u = perUser.get(who) || { count: 0, docs: new Set() };
              u.count += 1;
              u.docs.add(url);
              perUser.set(who, u);
            }

            // 5) Sorts
            const docsSorted = Array.from(perDoc.entries()).sort((a,b) => {
              if (b[1].count !== a[1].count) return b[1].count - a[1].count;
              return a[0].localeCompare(b[0]);
            });
            const usersSorted = Array.from(perUser.entries()).sort((a,b) => {
              if (b[1].count !== a[1].count) return b[1].count - a[1].count;
              return a[0].localeCompare(b[0]);
            });
            const logSorted = entries.sort((a,b) => {
              if (a.date !== b.date) return b.date.localeCompare(a.date); // newest first
              return a.number - b.number;
            });

            // 6) Render Markdown
            const escapePipe = (s) => (s || '').replace(/\|/g, '\\|');
            const linkify = (s) => s && s.startsWith('http') ? `[${escapePipe(s)}](${s})` : escapePipe(s);

            const totalReads  = entries.length;
            const uniqueUsers = perUser.size;
            const uniqueDocs  = perDoc.size;

            const docsTable = [
              '| Document | Reads | Unique users | Last read |',
              '|---|---:|---:|:---|',
              ...docsSorted.map(([url, d]) =>
                `| ${linkify(url)} | ${d.count} | ${d.users.size} | ${d.last} |`
              )
            ].join('\n');

            const usersTable = [
              '| User | Reads | Unique documents |',
              '|---|---:|---:|',
              ...usersSorted.map(([user, u]) =>
                `| ${escapePipe(user)} | ${u.count} | ${u.docs.size} |`
              )
            ].join('\n');

            const detailedLog = logSorted.map(e => {
              const ver = e.ver ? ` (version ${e.ver})` : '';
              return `- ${e.date} — ${e.who} read ${linkify(e.url)}${ver} [#${e.number}](https://github.com/${owner}/${repo}/issues/${e.number})`;
            }).join('\n');

            const mdSections = [
              '# Read-and-Understood',
              '',
              `This page lists read acknowledgements submitted via ${owner}/${repo}.`,
              '',
              ...(totalReads === 0 ? [
                '',
                '> No acknowledgements found yet. If you just clicked “Mark as read,” confirm that issues are created in LYO-X/read-logs and that the Issue Form or label is applied.',
                ''
              ] : [
                '## Summary',
                `- Total acknowledgements: **${totalReads}**`,
                `- Unique users: **${uniqueUsers}**`,
                `- Unique documents: **${uniqueDocs}**`,
                '',
                '### Reads by document',
                docsTable,
                '',
                '### Reads by user',
                usersTable,
                '',
                '## Detailed log',
                detailedLog,
                ''
              ])
            ];

            fs.writeFileSync('Read-and-Understood.md', mdSections.join('\n'));

      - name: Commit updates
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add Read-and-Understood.md
            git commit -m "Update Read-and-Understood.md"
            git push
          fi
